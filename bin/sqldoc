#!/usr/bin/env php
<?php

require __DIR__."/../vendor/autoload.php";

use \DealNews\Console\Console;

// Cause all errors to throw an ErrorException
set_error_handler(function($errno, $errstr, $errfile, $errline, $errcontext = []) {
    // error was suppressed with the @-operator
    if (0 === error_reporting()) {
        return false;
    }

    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
});

$config_options = [
    'generate-docblocks' => [
        'optional'    => Console::OPTIONAL,
        'description' => 'If true, doc blocks will be added/updated in .sql files.',
    ],
    'generate-html' => [
        'optional'    => Console::OPTIONAL,
        'description' => 'If true, HTML documentation will be generated',
    ],
    'test' => [
        'optional'    => Console::OPTIONAL,
        'description' => 'Doc blocks are output and files are not updated',
    ],
    'generate-html-dir' => [
        'param' => 'DIR',
        'optional'    => Console::OPTIONAL,
        'description' => 'Directory where HTML documentation is generated (default \'html\')',
    ],
    'config' => [
        'param'       => 'CONFIG_FILE',
        'optional'    => Console::OPTIONAL,
        'description' => 'Location of sqldoc YAML file. If a file named .sqldoc.yaml is found in the current directory, it will be used by default.',
    ],
    'dir' => [
        'param'       => 'DIR[,DIR]',
        'optional'    => Console::OPTIONAL,
        'description' => 'Directory containing .sql files.',
    ],
    'file' => [
        'param'       => 'FILE[,FILE]',
        'optional'    => Console::OPTIONAL,
        'description' => 'File',
    ],
    'schema' => [
        'param'       => 'SCHEMA',
        'optional'    => Console::OPTIONAL,
        'description' => 'Schema (aka database) name to add to doc blocks',
    ],
    'schema-dir' => [
        'optional'    => Console::OPTIONAL,
        'description' => 'Uses the parent directory name of the file as the schema name',
    ],
    'project-name' => [
        'param'       => 'NAME',
        'optional'    => Console::OPTIONAL,
        'description' => 'Project name to be used when generating documentation.',
    ],
    'template-dir' => [
        'param'       => 'DIR',
        'optional'    => Console::OPTIONAL,
        'description' => 'Location where template files are located. Default: src/template',
    ],
    'index-template' => [
        'param'       => 'FILENAME',
        'optional'    => Console::OPTIONAL,
        'description' => 'Name of template file for generating the index page. Default: default.twig',
    ],
    'schema-template' => [
        'param'       => 'FILENAME',
        'optional'    => Console::OPTIONAL,
        'description' => 'Name of template file for generating the schema page. Default: default.twig',
    ],
    'table-template' => [
        'param'       => 'FILENAME',
        'optional'    => Console::OPTIONAL,
        'description' => 'Name of template file for generating the table page. Default: default.twig',
    ],
];

$cli = new Console(
    [
        'help' => [
            'header' => 'Parses SQL files with create table statements and generates doc blocks.',
        ],
    ],
    $config_options
);

$cli->run();

$verbose_level = $cli::VERBOSITY_VERBOSE;
if($cli->test) {
    // if in test mode, output things as if -v is set
    $verbose_level = $cli::VERBOSITY_NORMAL;
}

$config_file = $cli->getOpt("config");

if(empty($config_file)) {
    if (file_exists("./.sqldoc.yaml")) {
        $config_file = "./.sqldoc.yaml";
    }
}

$options = [];

if(!empty($config_file)) {
    $cli->write("Using config file $config_file", $verbose_level);
    $options = yaml_parse_file($config_file);
}

foreach($config_options as $key => $settings) {
    $value = $cli->getOpt($key);
    if ($value !== null) {
        $options[$key] = $value;
    }
}

// default to test mode
if(empty($options["generate-html"]) && empty($options["generate-docblocks"])) {
    $options["test"] = true;
}

$dirs = $options["dir"] ?? [];

if(empty($dirs) && !empty($options["schemas"])) {
    foreach($options["schemas"] as $schema => $settings) {
        if(!empty($settings["directory"])) {
            $dirs[] = $settings["directory"];
        }
    }
}

if(!empty($dirs)) {
    if (!is_array($dirs)) {
        $dirs = explode(",", $dirs);
    }
    $files = [];
    foreach ($dirs as $dir) {
        $dir = rtrim($dir, "/");
        $files = array_merge(
            $files,
            explode("\n", trim(`find $dir -name '*.sql'`))
        );
    }
} elseif (!empty($options["file"])) {
    $files = explode(",", $options["file"]);
}

if(empty($files)) {
    $cli->showHelp("No .sql files found to parse.", 1);
}

$schemas = [];

foreach($files as $file) {

    $cli->write("Parsing $file...", $verbose_level);;

    $parser = new \DealNews\SQLDoc\Parser\Table();

    try {
        $table = $parser->parseFile($file);
    } catch (\InvalidArgumentException $e) {
        continue;
    } catch (\Throwable $e) {
        $cli->write("Failed to parse $file: ".$e->getMessage());
        $cli->write($e->getTraceAsString(), $cli::VERBOSITY_VERBOSE);
        continue;
    }

    if (!empty($options["schema-dir"])) {
        $table->schema = basename(dirname($file));
    }

    $doc = new \DealNews\SQLDoc\DocBlock();

    $table = $doc->parseFileAndMerge($table, $file);

    $output = $doc->generate($table);

    if (!empty($options["test"])) {
        $cli->write($output);
    } else {
        if(!empty($options["generate-docblocks"])) {
            $message = "";
            $result = false;
            try {
                $result = $doc->updateFile($file, $output);
            } catch (\Throwable $e) {
                $message = $e->getMessage();
            }
            if ($result === true) {
                $cli->write("Updated $file", $verbose_level);
            } elseif ($result === null) {
                $cli->write("No need to update $file", $verbose_level);
            } else {
                $cli->write("Failed to update $file: $message");
            }
        }
    }

    $schema = $options["schema"] ?? $table->schema ?? "Unknown Schema";

    if (empty($schemas[$schema])) {
        $schemas[$schema] = [
            "name"        => $schema,
            "tables"      => [],
            "description" => $options["schemas"][$schema]["description"] ?? "",
        ];
    }

    $schemas[$schema]["tables"][] = $table;
}

if(!empty($options["generate-docblocks"]) && !empty($options["test"])) {
    $cli->write("Test mode. No files updated.");
}

if (!empty($options["generate-html"])) {
    if(empty($options["test"])){

        $template_names = [];

        if(!empty($options["index-template"])) {
            $template_names["index"] = $options["index-template"];
        }

        if(!empty($options["schema-template"])) {
            $template_names["schema"] = $options["schema-template"];
        }

        if(!empty($options["table-template"])) {
            $template_names["table"] = $options["table-template"];
        }

        $docgen = new \DealNews\SQLDoc\GenerateHTML(
            $options['generate-html-dir'] ?? null,
            $options["template-dir"] ?? null,
            $template_names,
            $options["project-name"] ?? null
        );
        $docgen->generate($schemas);
        $cli->write("HTML documentation generated.", $verbose_level);
    } else {
        $cli->write("Test mode. No HTML generated.");
    }
}
